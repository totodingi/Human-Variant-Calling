
projectDir = "../../"
dataDir = f"{projectDir}datasets/H3A_VarCall_TestData/WES_chr1_50X_E0.005/"
# reads = f"{dataDir}*read*"
read1 = f"{dataDir}WES_chr1_50X_E0.005_merged_read1.fq.gz"
read2 = f"{dataDir}WES_chr1_50X_E0.005_merged_read2.fq.gz"
# read_1 = f"{projectDir}datasets/H3A_VarCall_TestData/WES_chr1_50X_E0.005/WES_chr1_50X_E0.005_merged_read1.fq.gz"
# read_2 = "../../datasets/H3A_VarCall_TestData/WES_chr1_50X_E0.005/WES_chr1_50X_E0.005_merged_read2.fq.gz"
threads = 100
rule run_fastqc:
    input:
        read1,
        read2

    threads: 10
    output:
        directory('../results/fastqc')
    message:
        "Now running fastqc on the raw data"
    shell:
        "mkdir -p {output} ;  "
        "fastqc -o {output} --extract {read1} {read2} "


rule trim_sequences:
    input:
        read1,
        read2
    output:
        directory('../results/trimmomatic')
    threads:
        10
    message:
        "Now running trimmomatic on the sequences"
    shell:
        "mkdir -p {output} ;"
        "trimmomatic PE {read1} {read2} -baseout '{output}/filtered_reads.fq.gz' "
        "-trimlog '{output}/trimlog' -phred64 -threads {threads} "
        "MINLEN:36"

import os

def get_seqs(dir):
    print(dir)
    files = []
    for root, directory, fil in os.walk(str(dir)):
        files.append(fil)
    return files

rule trimmed_fastqc:
    input:
        rules.trim_sequences.output

    output:
        directory('../results/trimmed_fastqc/')

    message:
        "Now running fastqc on trimmed sequences"
    run:
        shell("mkdir -p {output} ; ")
        for file_list in get_seqs(input):
            for file in file_list:
                if str(file).endswith(".fq.gz"):
                    file_path = str(input) + '/' + str(file)
                    shell("fastqc -o {output} --extract {file_path} ;")

rule run_alignment:
    input:
        rules.trim_sequences.output
    output:
        directory('../results/alignment/')
    message:
        "Now performing an alignment"
    run:
        shell("mkdir -p {output} ;")
        # "dbsnp_138.hg19.NoChrInNames.vcf.gz"
        ref_seq = f'{dataDir}HG19_GATKbundle2.8_noDecoys.noChrInName.fa.gz'
        # ref_seq = f'{dataDir}dbsnp_138.hg19.NoChrInNames.vcf.gz'
        align_read1 = ''
        align_read2 = ''
        for reads in get_seqs(input):
            for read in reads:
                print(read)
                if str(read).endswith('_1P.fq.gz'):
                    align_read1 = str(input) + '/' + str(read)
                elif str(read).endswith("_2P.fq.gz"):
                    align_read2 = str(input) + '/' + str(read)
        # print('align_read1', align_read1)
        # print('align_read2', align_read2)
        shell("bwa-mem2 index {ref_seq} ; ")
        shell("bwa-mem2 mem -t {threads} {ref_seq} {align_read1} {align_read2} > {output}/aligned_output.sam ;")

rule convert_sam_to_bam:
    input:
        f'{rules.run_alignment.output}/aligned_output.sam'
    output:
        f'{rules.run_alignment.output}/aligned_output.bam'
    message:
        "Now converting the sam file into a bam file"
    shell:
        "picard SamFormatConverter I={input} O={output}"

rule all:
    input:
        rules.run_fastqc.output,
        rules.trim_sequences.output,
        rules.trimmed_fastqc.output,
        rules.run_alignment.output,
        rules.convert_sam_to_bam.output
    message:
        "Running the workflow"